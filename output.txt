Mon Apr 29 21:39:24 PDT 2024
Linux csslab7 4.18.0-513.18.1.el8_9.x86_64 #1 SMP Wed Feb 21 21:34:36 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux
uid=1158009(amyv16) gid=2121158009(amyv16) groups=2121158009(amyv16),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
testGraph0DFS
testGraph0BFS
testGraph0Dijkstra
testGraph0NotDirected
testGraph1
Done!
=====================================================
3. clang-tidy warnings are fixed
=====================================================
61421 warnings generated.
103458 warnings generated.
137957 warnings generated.
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:2:1: error: system include algorithm not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <algorithm>
^~~~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:3:1: error: system include fstream not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <fstream>
^~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:4:1: error: system include functional not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <functional>
^~~~~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:5:1: error: system include iostream not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <iostream>
^~~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:6:1: error: system include map not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <map>
^~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:7:1: error: system include queue not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <queue>
^~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:8:1: error: system include set not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <set>
^~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:9:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
#include <utility>
^
note: this fix will not be applied because it overlaps with another fix
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:9:1: error: system include utility not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <utility>
^~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:10:1: error: system include vector not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <vector>
^~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:11:1: error: system include stack not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <stack>
^~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:13:17: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
using namespace std;
                ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:16:9: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
Vertex::Vertex(string value)
        ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:18:3: error: 'value' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer,-warnings-as-errors]
  this->value = value;
  ^~~~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:18:15: error: 'operator=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  this->value = value;
              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:800:7: note: resolves to this declaration
      operator=(const basic_string& __str)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:18:17: error: parameter 'value' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param,-warnings-as-errors]
  this->value = value;
                ^
note: this fix will not be applied because it overlaps with another fix
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:23:8: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
Graph::Graph(bool directionalEdges)
       ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:25:3: error: 'directionalEdges' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer,-warnings-as-errors]
  this->directionalEdges = directionalEdges;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:29:8: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
Graph::~Graph()
       ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:31:20: error: invalid case style for variable 'vertex' [readability-identifier-naming,-warnings-as-errors]
  for (const auto &vertex : vertices)
                   ^~~~~~
                   Vertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:31:27: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertices)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:31:27: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertices)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:31:27: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertices)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:33:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    for (const auto &edge : vertex.second->edges)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:33:22: error: invalid case style for variable 'edge' [readability-identifier-naming,-warnings-as-errors]
    for (const auto &edge : vertex.second->edges)
                     ^~~~
                     Edge
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:33:27: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &edge : vertex.second->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:33:27: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &edge : vertex.second->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:33:27: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &edge : vertex.second->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:42:12: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
int Graph::verticesSize() const
           ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:44:10: error: narrowing conversion from 'size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions,-warnings-as-errors]
  return vertices.size();
         ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:48:12: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
int Graph::edgesSize() const
           ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:50:7: error: invalid case style for variable 'numberOfEdges' [readability-identifier-naming,-warnings-as-errors]
  int numberOfEdges = 0;
      ^~~~~~~~~~~~~
      NumberOfEdges
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:51:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (const auto &vertex : vertices)
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:51:20: error: invalid case style for variable 'vertex' [readability-identifier-naming,-warnings-as-errors]
  for (const auto &vertex : vertices)
                   ^~~~~~
                   Vertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:51:27: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertices)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:51:27: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertices)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:51:27: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertices)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:53:22: error: narrowing conversion from 'size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions,-warnings-as-errors]
    numberOfEdges += vertex.second->edges.size();
                     ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:65:12: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
int Graph::vertexDegree(const string &label) const
           ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:67:11: error: invalid case style for variable 'vertexFind' [readability-identifier-naming,-warnings-as-errors]
  Vertex *vertexFind = nullptr; // vertex found
          ^~~~~~~~~~
          VertexFind
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:69:7: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (vertices.count(label))
      ^
                            != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:78:10: error: narrowing conversion from 'size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions,-warnings-as-errors]
  return vertexFind->edges.size();
         ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:82:13: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
bool Graph::add(const string &label)
            ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:84:7: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (vertices.count(label))
      ^
                            != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:88:3: error: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return,-warnings-as-errors]
  else
  ^~~~
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:97:13: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
bool Graph::contains(const string &label) const
            ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:99:10: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  return vertices.count(label);
         ^
                               != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:104:15: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
string Graph::getEdgesAsString(const string &label) const
              ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:106:11: error: invalid case style for variable 'vertexFind' [readability-identifier-naming,-warnings-as-errors]
  Vertex *vertexFind = nullptr; // vertex found
          ^~~~~~~~~~
          VertexFind
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:107:10: error: invalid case style for variable 'edgeString' [readability-identifier-naming,-warnings-as-errors]
  string edgeString = "";       // string representing edges and weights
         ^
note: this fix will not be applied because it overlaps with another fix
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:107:10: error: redundant string initialization [readability-redundant-string-init,-warnings-as-errors]
  string edgeString = "";       // string representing edges and weights
         ^~~~~~~~~~~~~~~
         edgeString
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:110:7: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (vertices.count(label))
      ^
                            != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:120:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (const auto &vertex : vertexFind->edges)
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:120:20: error: invalid case style for variable 'vertex' [readability-identifier-naming,-warnings-as-errors]
  for (const auto &vertex : vertexFind->edges)
                   ^~~~~~
                   Vertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:120:27: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertexFind->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:120:27: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertexFind->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:120:27: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertexFind->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:122:5: error: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation,-warnings-as-errors]
    edgeString = edgeString + vertex.second->destination->value +
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:122:16: error: 'operator=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    edgeString = edgeString + vertex.second->destination->value +
               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:841:7: note: resolves to this declaration
      operator=(basic_string&& __str)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:122:29: error: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    edgeString = edgeString + vertex.second->destination->value +
                            ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3541:5: note: resolves to this declaration
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:122:65: error: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    edgeString = edgeString + vertex.second->destination->value +
                                                                ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3676:5: note: resolves to this declaration
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:123:22: error: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
                 "(" + to_string(vertex.second->distance) + "),";
                     ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3639:5: note: resolves to this declaration
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:123:24: error: 'to_string' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
                 "(" + to_string(vertex.second->distance) + "),";
                       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:4150:3: note: resolves to this declaration
  to_string(int __val)
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:123:59: error: 'operator+<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
                 "(" + to_string(vertex.second->distance) + "),";
                                                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3676:5: note: resolves to this declaration
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:129:16: error: 'operator=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    edgeString = edgeString.substr(0, edgeString.size() - 1);
               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:841:7: note: resolves to this declaration
      operator=(basic_string&& __str)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:136:13: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
bool Graph::connect(const string &from, const string &to, int weight)
            ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:136:55: error: parameter name 'to' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool Graph::connect(const string &from, const string &to, int weight)
                                                      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:138:11: error: invalid case style for variable 'fromVertex' [readability-identifier-naming,-warnings-as-errors]
  Vertex *fromVertex = nullptr;
          ^~~~~~~~~~
          FromVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:139:11: error: invalid case style for variable 'toVertex' [readability-identifier-naming,-warnings-as-errors]
  Vertex *toVertex = nullptr;
          ^~~~~~~~
          ToVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:142:12: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  if (from == to)
           ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3698:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:148:8: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!(vertices.count(from)))
      ~^
                              == 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:153:8: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!(vertices.count(to)))
      ~^
                            == 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:158:24: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  fromVertex = vertices[from];
                       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
      operator[](const key_type& __k)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:159:22: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  toVertex = vertices[to];
                     ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
      operator[](const key_type& __k)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:162:7: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (fromVertex->edges.count(to))
      ^
                                  != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:179:13: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
bool Graph::disconnect(const string &from, const string &to)
            ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:179:58: error: parameter name 'to' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
bool Graph::disconnect(const string &from, const string &to)
                                                         ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:181:11: error: invalid case style for variable 'fromVertex' [readability-identifier-naming,-warnings-as-errors]
  Vertex *fromVertex = nullptr;
          ^~~~~~~~~~
          FromVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:182:11: error: invalid case style for variable 'toVertex' [readability-identifier-naming,-warnings-as-errors]
  Vertex *toVertex = nullptr;
          ^~~~~~~~
          ToVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:185:13: error: 'operator!=<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  if ((from != to) && (vertices.count(from) && vertices.count(to)))
            ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3776:5: note: resolves to this declaration
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:185:24: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if ((from != to) && (vertices.count(from) && vertices.count(to)))
                       ^
                       (                    != 0u)
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:185:48: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if ((from != to) && (vertices.count(from) && vertices.count(to)))
                                               ^
                                               (                  != 0u)
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:187:26: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    fromVertex = vertices[from];
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
      operator[](const key_type& __k)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:188:24: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    toVertex = vertices[to];
                       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
      operator[](const key_type& __k)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:196:7: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (fromVertex->edges.count(to))
      ^
                                  != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:217:13: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void Graph::dfs(const string &startLabel, void visit(const string &label))
            ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:219:15: error: invalid case style for variable 'visited' [readability-identifier-naming,-warnings-as-errors]
  set<string> visited;     // keep track of visited vertices
              ^~~~~~~
              Visited
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:220:19: error: invalid case style for variable 'toVisit' [readability-identifier-naming,-warnings-as-errors]
  stack<Vertex *> toVisit; // keep tack of vertices to visit
                  ^~~~~~~
                  ToVisit
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:221:11: error: invalid case style for variable 'currentVertex' [readability-identifier-naming,-warnings-as-errors]
  Vertex *currentVertex = nullptr;
          ^~~~~~~~~~~~~
          CurrentVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:224:7: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (vertices.count(startLabel))
      ^
                                 != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:226:26: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    toVisit.push(vertices[startLabel]);
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
      operator[](const key_type& __k)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:221:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  Vertex *currentVertex = nullptr;
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:243:51: error: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
    map<string, Vertex::Edge *>::reverse_iterator it;
                                                  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:243:51: error: invalid case style for variable 'it' [readability-identifier-naming,-warnings-as-errors]
    map<string, Vertex::Edge *>::reverse_iterator it;
                                                  ^~
                                                  It
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:246:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    for (it = currentVertex->edges.rbegin(); it != currentVertex->edges.rend(); it++)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:246:13: error: 'operator=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (it = currentVertex->edges.rbegin(); it != currentVertex->edges.rend(); it++)
            ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_iterator.h:210:25: note: resolves to this declaration
      reverse_iterator& operator=(const reverse_iterator&) = default;
                        ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:246:46: error: backward branch (for loop) is ID-dependent due to variable reference to 'currentVertex' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
    for (it = currentVertex->edges.rbegin(); it != currentVertex->edges.rend(); it++)
                                             ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:246:49: error: 'operator!=<std::_Rb_tree_iterator<std::pair<const std::basic_string<char>, Vertex::Edge *>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (it = currentVertex->edges.rbegin(); it != currentVertex->edges.rend(); it++)
                                                ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_iterator.h:462:5: note: resolves to this declaration
    operator!=(const reverse_iterator<_Iterator>& __x,
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:246:83: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (it = currentVertex->edges.rbegin(); it != currentVertex->edges.rend(); it++)
                                                                                  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_iterator.h:308:7: note: resolves to this declaration
      operator++(int)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:249:12: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
      if (!(visited.count(it->second->destination->value)))
          ~^
                                                           == 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:249:29: error: 'operator->' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      if (!(visited.count(it->second->destination->value)))
                            ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_iterator.h:277:7: note: resolves to this declaration
      operator->() const
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:251:26: error: 'operator->' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
        visited.insert(it->second->destination->value);
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_iterator.h:277:7: note: resolves to this declaration
      operator->() const
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:252:24: error: 'operator->' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
        toVisit.push(it->second->destination);
                       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_iterator.h:277:7: note: resolves to this declaration
      operator->() const
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:259:13: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void Graph::bfs(const string &startLabel, void visit(const string &label))
            ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:261:15: error: invalid case style for variable 'visited' [readability-identifier-naming,-warnings-as-errors]
  set<string> visited;     // keep track of visited vertices
              ^~~~~~~
              Visited
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:262:19: error: invalid case style for variable 'toVisit' [readability-identifier-naming,-warnings-as-errors]
  queue<Vertex *> toVisit; // keep track of vertices to visit
                  ^~~~~~~
                  ToVisit
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:263:11: error: invalid case style for variable 'currentVertex' [readability-identifier-naming,-warnings-as-errors]
  Vertex *currentVertex = nullptr;
          ^~~~~~~~~~~~~
          CurrentVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:266:7: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (vertices.count(startLabel))
      ^
                                 != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:268:26: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    toVisit.push(vertices[startLabel]);
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
      operator[](const key_type& __k)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:284:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    for (const auto &edge : currentVertex->edges)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:284:22: error: invalid case style for variable 'edge' [readability-identifier-naming,-warnings-as-errors]
    for (const auto &edge : currentVertex->edges)
                     ^~~~
                     Edge
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:284:27: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &edge : currentVertex->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:284:27: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &edge : currentVertex->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:284:27: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &edge : currentVertex->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:287:12: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
      if (!(visited.count(edge.second->destination->value)))
          ~^
                                                            == 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:301:8: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
Graph::dijkstra(const string &startLabel) const
       ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:303:20: error: invalid case style for variable 'weights' [readability-identifier-naming,-warnings-as-errors]
  map<string, int> weights;     // store weights
                   ^~~~~~~
                   Weights
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:304:23: error: invalid case style for variable 'previous' [readability-identifier-naming,-warnings-as-errors]
  map<string, string> previous; // store previous vertices/path
                      ^~~~~~~~
                      Previous
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:313:7: error: invalid case style for variable 'toVisit' [readability-identifier-naming,-warnings-as-errors]
      toVisit;
      ^~~~~~~
      ToVisit
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:315:11: error: invalid case style for variable 'currentVertex' [readability-identifier-naming,-warnings-as-errors]
  Vertex *currentVertex = nullptr;
          ^~~~~~~~~~~~~
          CurrentVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:316:7: error: invalid case style for variable 'path' [readability-identifier-naming,-warnings-as-errors]
  int path = 0;                      // path cost
      ^~~~
      Path
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:317:10: error: invalid case style for variable 'previousLabel' [readability-identifier-naming,-warnings-as-errors]
  string previousLabel = startLabel; // previous vertex
         ^~~~~~~~~~~~~
         PreviousLabel
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:320:7: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (vertices.count(startLabel))
      ^
                                 != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:322:13: error: use emplace instead of push [hicpp-use-emplace,modernize-use-emplace,-warnings-as-errors]
    toVisit.push(make_pair(0, make_pair(startLabel, vertices.at(startLabel))));
            ^~~~~~~~~~~~~~                                                  ~
            emplace
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:322:18: error: 'make_pair<int, std::pair<std::basic_string<char>, Vertex *>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    toVisit.push(make_pair(0, make_pair(startLabel, vertices.at(startLabel))));
                 ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:922:5: note: resolves to this declaration
    make_pair(_T1&& __x, _T2&& __y)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:322:31: error: 'make_pair<const std::basic_string<char> &, Vertex *const &>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    toVisit.push(make_pair(0, make_pair(startLabel, vertices.at(startLabel))));
                              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:922:5: note: resolves to this declaration
    make_pair(_T1&& __x, _T2&& __y)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:326:12: error: 'make_pair<std::map<std::basic_string<char>, int> &, std::map<std::basic_string<char>, std::basic_string<char>> &>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    return make_pair(weights, previous);
           ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:922:5: note: resolves to this declaration
    make_pair(_T1&& __x, _T2&& __y)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:333:19: error: 'operator=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    previousLabel = toVisit.top().second.first;  // get previous vertex of vertex
                  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:800:7: note: resolves to this declaration
      operator=(const basic_string& __str)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:338:10: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
    if (!(weights.count(currentVertex->value)) ||
        ~^
        (                                      == 0u)
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:342:12: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
      if (!(weights.count(currentVertex->value)))
          ~^
                                                 == 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:349:17: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
        previous[currentVertex->value] = previousLabel;
                ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
      operator[](const key_type& __k)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:349:40: error: 'operator=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
        previous[currentVertex->value] = previousLabel;
                                       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:800:7: note: resolves to this declaration
      operator=(const basic_string& __str)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:350:16: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
        weights[currentVertex->value] = path;
               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_map.h:504:7: note: resolves to this declaration
      operator[](const key_type& __k)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:354:7: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
      for (const auto &edge : currentVertex->edges)
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:354:24: error: invalid case style for variable 'edge' [readability-identifier-naming,-warnings-as-errors]
      for (const auto &edge : currentVertex->edges)
                       ^~~~
                       Edge
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:354:29: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      for (const auto &edge : currentVertex->edges)
                            ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:354:29: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      for (const auto &edge : currentVertex->edges)
                            ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:354:29: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      for (const auto &edge : currentVertex->edges)
                            ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:358:14: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
        if (!(weights.count(edge.second->destination->value)) ||
            ~^
            (                                                 == 0u)
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:362:19: error: use emplace instead of push [hicpp-use-emplace,modernize-use-emplace,-warnings-as-errors]
          toVisit.push(make_pair(path + edge.second->distance,
                  ^~~~~~~~~~~~~~
                  emplace
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:362:24: error: 'make_pair<int, std::pair<std::basic_string<char>, Vertex *>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
          toVisit.push(make_pair(path + edge.second->distance,
                       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:922:5: note: resolves to this declaration
    make_pair(_T1&& __x, _T2&& __y)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:363:34: error: 'make_pair<std::basic_string<char> &, Vertex *&>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
                                 make_pair(currentVertex->value, edge.second->destination)));
                                 ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:922:5: note: resolves to this declaration
    make_pair(_T1&& __x, _T2&& __y)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:373:10: error: 'make_pair<std::map<std::basic_string<char>, int> &, std::map<std::basic_string<char>, std::basic_string<char>> &>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  return make_pair(weights, previous);
         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:922:5: note: resolves to this declaration
    make_pair(_T1&& __x, _T2&& __y)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:377:12: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
int Graph::mstPrim(const string &startLabel,
           ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:378:65: error: parameter name 'to' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
                   void visit(const string &from, const string &to,
                                                                ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:385:7: error: variable name 'pq' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
      pq;
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:385:7: error: invalid case style for variable 'pq' [readability-identifier-naming,-warnings-as-errors]
      pq;
      ^~
      Pq
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:388:15: error: invalid case style for variable 'visited' [readability-identifier-naming,-warnings-as-errors]
  set<string> visited;
              ^~~~~~~
              Visited
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:391:9: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!(vertices.count(startLabel) || directionalEdges))
        ^
        (                          != 0u)
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:400:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (const auto &edge : vertices.at(startLabel)->edges)
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:400:20: error: invalid case style for variable 'edge' [readability-identifier-naming,-warnings-as-errors]
  for (const auto &edge : vertices.at(startLabel)->edges)
                   ^~~~
                   Edge
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:400:25: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &edge : vertices.at(startLabel)->edges)
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:400:25: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &edge : vertices.at(startLabel)->edges)
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:400:25: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &edge : vertices.at(startLabel)->edges)
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:405:7: error: invalid case style for variable 'totalWeight' [readability-identifier-naming,-warnings-as-errors]
  int totalWeight = 0; // Total weight of the MST
      ^~~~~~~~~~~
      TotalWeight
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:411:10: error: invalid case style for variable 'edge' [readability-identifier-naming,-warnings-as-errors]
    auto edge = pq.top();
         ^~~~
         Edge
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:414:5: error: variable 'weight' of type 'int' can be declared 'const' [misc-const-correctness,-warnings-as-errors]
    int weight = edge.first;
    ^
        const 
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:414:9: error: invalid case style for variable 'weight' [readability-identifier-naming,-warnings-as-errors]
    int weight = edge.first;
        ^~~~~~
        Weight
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:415:5: error: variable 'fromVertex' of type 'string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness,-warnings-as-errors]
    string fromVertex = edge.second.first;
    ^
           const 
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:415:12: error: invalid case style for variable 'fromVertex' [readability-identifier-naming,-warnings-as-errors]
    string fromVertex = edge.second.first;
           ^~~~~~~~~~
           FromVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:416:5: error: variable 'toVertex' of type 'string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness,-warnings-as-errors]
    string toVertex = edge.second.second;
    ^
           const 
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:416:12: error: invalid case style for variable 'toVertex' [readability-identifier-naming,-warnings-as-errors]
    string toVertex = edge.second.second;
           ^~~~~~~~
           ToVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:419:9: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
    if (visited.count(toVertex))
        ^
                                != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:434:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    for (const auto &nextEdge : vertices.at(toVertex)->edges)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:434:22: error: invalid case style for variable 'nextEdge' [readability-identifier-naming,-warnings-as-errors]
    for (const auto &nextEdge : vertices.at(toVertex)->edges)
                     ^~~~~~~~
                     NextEdge
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:434:31: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &nextEdge : vertices.at(toVertex)->edges)
                              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:434:31: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &nextEdge : vertices.at(toVertex)->edges)
                              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:434:31: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &nextEdge : vertices.at(toVertex)->edges)
                              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:436:12: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
      if (!visited.count(nextEdge.first))
          ~^
                                         == 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:447:12: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
int Graph::mstKruskal(const string &startLabel,
           ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:447:12: error: function 'mstKruskal' has cognitive complexity of 32 (threshold 25) [readability-function-cognitive-complexity,-warnings-as-errors]
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:478:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (!(vertices.count(startLabel)) || directionalEdges)
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:478:37: note: +1
  if (!(vertices.count(startLabel)) || directionalEdges)
                                    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:484:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for (const auto &vertex : vertices)
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:486:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for (const auto &edge : vertex.second->edges)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:494:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  while (!(edges.empty()))
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:505:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for (int i = 0; i < minimumSpanningTree.size(); i++)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:507:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (minimumSpanningTree[i].second.second.count(fromVertex))
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:512:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (minimumSpanningTree[i].second.second.count(toVertex))
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:519:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (fromIndex == -1 && toIndex == -1)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:519:25: note: +1
    if (fromIndex == -1 && toIndex == -1)
                        ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:536:10: note: +1, nesting level increased to 2
    else if (fromIndex == -1 && toIndex != -1)
         ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:536:30: note: +1
    else if (fromIndex == -1 && toIndex != -1)
                             ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:545:10: note: +1, nesting level increased to 2
    else if (fromIndex != -1 && toIndex == -1)
         ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:545:30: note: +1
    else if (fromIndex != -1 && toIndex == -1)
                             ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:556:10: note: +1, nesting level increased to 2
    else if (fromIndex != -1 && toIndex != -1 &&
         ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:557:35: note: +1
             fromIndex != toIndex &&
                                  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:573:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for (int i = 0; i < minimumSpanningTree.size(); i++)
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:575:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (minimumSpanningTree[i].second.second.count(startLabel))
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:586:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  while (!(minimumSpanningTreeTraversal.empty()))
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:596:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for (int connectedVertices :
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:599:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (!(visited.count(connectedVertices)))
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:448:68: error: parameter name 'to' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
                      void visit(const string &from, const string &to,
                                                                   ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:456:7: error: invalid case style for variable 'edges' [readability-identifier-naming,-warnings-as-errors]
      edges;
      ^~~~~
      Edges
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:463:50: error: invalid case style for variable 'minimumSpanningTree' [readability-identifier-naming,-warnings-as-errors]
  vector<pair<int, pair<set<int>, set<string>>>> minimumSpanningTree;
                                                 ^~~~~~~~~~~~~~~~~~~
                                                 MinimumSpanningTree
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:466:7: error: invalid case style for variable 'startVertexConnection' [readability-identifier-naming,-warnings-as-errors]
  int startVertexConnection = -1;
      ^~~~~~~~~~~~~~~~~~~~~
      StartVertexConnection
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:469:7: error: invalid case style for variable 'total' [readability-identifier-naming,-warnings-as-errors]
  int total = 0;
      ^~~~~
      Total
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:472:14: error: invalid case style for variable 'minimumSpanningTreeTraversal' [readability-identifier-naming,-warnings-as-errors]
  queue<int> minimumSpanningTreeTraversal;
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
             MinimumSpanningTreeTraversal
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:475:12: error: invalid case style for variable 'visited' [readability-identifier-naming,-warnings-as-errors]
  set<int> visited;
           ^~~~~~~
           Visited
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:478:8: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (!(vertices.count(startLabel)) || directionalEdges)
      ~^
      (                             == 0u)
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:484:20: error: invalid case style for variable 'vertex' [readability-identifier-naming,-warnings-as-errors]
  for (const auto &vertex : vertices)
                   ^~~~~~
                   Vertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:484:27: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertices)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:484:27: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertices)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:484:27: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (const auto &vertex : vertices)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:486:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    for (const auto &edge : vertex.second->edges)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:486:22: error: invalid case style for variable 'edge' [readability-identifier-naming,-warnings-as-errors]
    for (const auto &edge : vertex.second->edges)
                     ^~~~
                     Edge
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:486:27: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &edge : vertex.second->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:320:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:486:27: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &edge : vertex.second->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:277:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:486:27: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (const auto &edge : vertex.second->edges)
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:285:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:488:13: error: use emplace instead of push [hicpp-use-emplace,modernize-use-emplace,-warnings-as-errors]
      edges.push(make_pair(edge.second->distance,
            ^~~~~~~~~~~~~~
            emplace
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:488:18: error: 'make_pair<int &, std::pair<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      edges.push(make_pair(edge.second->distance,
                 ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:922:5: note: resolves to this declaration
    make_pair(_T1&& __x, _T2&& __y)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:489:28: error: 'make_pair<const std::basic_string<char> &, const std::basic_string<char> &>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
                           make_pair(vertex.first, edge.first)));
                           ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:922:5: note: resolves to this declaration
    make_pair(_T1&& __x, _T2&& __y)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:496:9: error: invalid case style for variable 'fromIndex' [readability-identifier-naming,-warnings-as-errors]
    int fromIndex = -1; // cluster index where the from vertex is located
        ^~~~~~~~~
        FromIndex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:497:9: error: invalid case style for variable 'toIndex' [readability-identifier-naming,-warnings-as-errors]
    int toIndex = -1;   // cluster index where the to vertex is located
        ^~~~~~~
        ToIndex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:499:5: error: variable 'distance' of type 'int' can be declared 'const' [misc-const-correctness,-warnings-as-errors]
    int distance = edges.top().first;             // cost of edge
    ^
        const 
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:499:9: error: invalid case style for variable 'distance' [readability-identifier-naming,-warnings-as-errors]
    int distance = edges.top().first;             // cost of edge
        ^~~~~~~~
        Distance
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:500:5: error: variable 'fromVertex' of type 'string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness,-warnings-as-errors]
    string fromVertex = edges.top().second.first; // from vertex
    ^
           const 
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:500:12: error: invalid case style for variable 'fromVertex' [readability-identifier-naming,-warnings-as-errors]
    string fromVertex = edges.top().second.first; // from vertex
           ^~~~~~~~~~
           FromVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:501:5: error: variable 'toVertex' of type 'string' (aka 'basic_string<char>') can be declared 'const' [misc-const-correctness,-warnings-as-errors]
    string toVertex = edges.top().second.second;  // tto vertex
    ^
           const 
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:501:12: error: invalid case style for variable 'toVertex' [readability-identifier-naming,-warnings-as-errors]
    string toVertex = edges.top().second.second;  // tto vertex
           ^~~~~~~~
           ToVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:505:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    for (int i = 0; i < minimumSpanningTree.size(); i++)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:505:14: error: invalid case style for variable 'i' [readability-identifier-naming,-warnings-as-errors]
    for (int i = 0; i < minimumSpanningTree.size(); i++)
             ^      ~                               ~
             I      I                               I
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:507:11: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
      if (minimumSpanningTree[i].second.second.count(fromVertex))
          ^
                                                                 != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:507:30: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      if (minimumSpanningTree[i].second.second.count(fromVertex))
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:512:11: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
      if (minimumSpanningTree[i].second.second.count(toVertex))
          ^
                                                               != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:512:30: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      if (minimumSpanningTree[i].second.second.count(toVertex))
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:522:19: error: invalid case style for variable 'connectedVertices' [readability-identifier-naming,-warnings-as-errors]
      set<string> connectedVertices;
                  ^~~~~~~~~~~~~~~~~
                  ConnectedVertices
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:527:7: error: variable 'otherConnectedVertices' of type 'set<int>' can be declared 'const' [misc-const-correctness,-warnings-as-errors]
      set<int> otherConnectedVertices;
      ^
               const 
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:527:16: error: invalid case style for variable 'otherConnectedVertices' [readability-identifier-naming,-warnings-as-errors]
      set<int> otherConnectedVertices;
               ^~~~~~~~~~~~~~~~~~~~~~
               OtherConnectedVertices
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:530:27: error: use emplace_back instead of push_back [hicpp-use-emplace,modernize-use-emplace,-warnings-as-errors]
      minimumSpanningTree.push_back(
                          ^~~~~~~~~~
                          emplace_back
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:531:11: error: 'make_pair<int &, std::pair<std::set<int>, std::set<std::basic_string<char>>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
          make_pair(distance, make_pair(otherConnectedVertices, connectedVertices)));
          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:922:5: note: resolves to this declaration
    make_pair(_T1&& __x, _T2&& __y)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:531:31: error: 'make_pair<std::set<int> &, std::set<std::basic_string<char>> &>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
          make_pair(distance, make_pair(otherConnectedVertices, connectedVertices)));
                              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_pair.h:922:5: note: resolves to this declaration
    make_pair(_T1&& __x, _T2&& __y)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:539:26: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      minimumSpanningTree[toIndex].second.second.insert(fromVertex);
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:540:26: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      minimumSpanningTree[toIndex].first =
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:541:30: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
          minimumSpanningTree[toIndex].first + distance;
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:548:26: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      minimumSpanningTree[fromIndex].second.second.insert(toVertex);
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:549:26: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      minimumSpanningTree[fromIndex].first =
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:550:30: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
          minimumSpanningTree[fromIndex].first + distance;
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:558:15: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
             !(minimumSpanningTree[fromIndex].second.first.count(toIndex)))
             ~^
             (                                                             == 0u)
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:558:35: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
             !(minimumSpanningTree[fromIndex].second.first.count(toIndex)))
                                  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:561:26: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      minimumSpanningTree[fromIndex].second.first.insert(toIndex);
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:562:26: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      minimumSpanningTree[toIndex].second.first.insert(fromIndex);
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:565:26: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
      minimumSpanningTree[fromIndex].first =
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:566:30: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
          minimumSpanningTree[fromIndex].first + distance;
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:573:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (int i = 0; i < minimumSpanningTree.size(); i++)
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:573:12: error: invalid case style for variable 'i' [readability-identifier-naming,-warnings-as-errors]
  for (int i = 0; i < minimumSpanningTree.size(); i++)
           ^      ~                               ~
           I      I                               I
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:575:9: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
    if (minimumSpanningTree[i].second.second.count(startLabel))
        ^
                                                               != 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:575:28: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    if (minimumSpanningTree[i].second.second.count(startLabel))
                           ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:593:40: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    total = total + minimumSpanningTree[startVertexConnection].first;
                                       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:596:5: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
    for (int connectedVertices :
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:596:10: error: variable 'connectedVertices' of type 'int' can be declared 'const' [misc-const-correctness,-warnings-as-errors]
    for (int connectedVertices :
         ^
             const 
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:596:14: error: invalid case style for variable 'connectedVertices' [readability-identifier-naming,-warnings-as-errors]
    for (int connectedVertices :
             ^~~~~~~~~~~~~~~~~
             ConnectedVertices
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:596:32: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (int connectedVertices :
                               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:596:32: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (int connectedVertices :
                               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:596:32: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    for (int connectedVertices :
                               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:597:29: error: 'operator[]' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
         minimumSpanningTree[startVertexConnection].second.first)
                            ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_vector.h:1123:7: note: resolves to this declaration
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:599:12: error: implicit conversion 'size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
      if (!(visited.count(connectedVertices)))
          ~^
                                              == 0u
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:611:13: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
bool Graph::readFile(const string &filename)
            ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:613:12: error: invalid case style for variable 'myfile' [readability-identifier-naming,-warnings-as-errors]
  ifstream myfile(filename);
           ^~~~~~
           Myfile
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:616:10: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    cerr << "Failed to open " << filename << endl;
         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:616:31: error: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    cerr << "Failed to open " << filename << endl;
                              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:4020:5: note: resolves to this declaration
    operator<<(basic_ostream<_CharT, _Traits>& __os,
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:616:43: error: 'operator<<' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    cerr << "Failed to open " << filename << endl;
                                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:616:46: error: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    cerr << "Failed to open " << filename << endl;
                                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
    endl(basic_ostream<_CharT, _Traits>& __os)
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:619:7: error: invalid case style for variable 'edges' [readability-identifier-naming,-warnings-as-errors]
  int edges = 0;
      ^~~~~
      Edges
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:620:7: error: invalid case style for variable 'weight' [readability-identifier-naming,-warnings-as-errors]
  int weight = 0;
      ^~~~~~
      Weight
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:621:10: error: invalid case style for variable 'fromVertex' [readability-identifier-naming,-warnings-as-errors]
  string fromVertex;
         ^~~~~~~~~~
         FromVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:622:10: error: invalid case style for variable 'toVertex' [readability-identifier-naming,-warnings-as-errors]
  string toVertex;
         ^~~~~~~~
         ToVertex
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:623:10: error: 'operator>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  myfile >> edges;
         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/istream:181:7: note: resolves to this declaration
      operator>>(int& __n);
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:624:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (int i = 0; i < edges; ++i)
  ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:624:12: error: invalid case style for variable 'i' [readability-identifier-naming,-warnings-as-errors]
  for (int i = 0; i < edges; ++i)
           ^      ~            ~
           I      I            I
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:626:12: error: 'operator>><char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    myfile >> fromVertex >> toVertex >> weight;
           ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:4007:5: note: resolves to this declaration
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:626:26: error: 'operator>><char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    myfile >> fromVertex >> toVertex >> weight;
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:4007:5: note: resolves to this declaration
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
    ^
/home/NETID/amyv16/HW3-GraphProject/graph.cpp:626:38: error: 'operator>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    myfile >> fromVertex >> toVertex >> weight;
                                     ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/istream:181:7: note: resolves to this declaration
      operator>>(int& __n);
      ^
/home/NETID/amyv16/HW3-GraphProject/graph.h:19:1: error: system include map not allowed, transitively included from /home/NETID/amyv16/HW3-GraphProject/graph.h [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <map>
^~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.h:20:1: error: system include string not allowed, transitively included from /home/NETID/amyv16/HW3-GraphProject/graph.h [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <string>
^~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.h:29:5: error: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,hicpp-explicit-conversions,-warnings-as-errors]
    Vertex(string value);
    ^
    explicit 
/home/NETID/amyv16/HW3-GraphProject/graph.h:31:12: error: accessing fields in struct 'Edge' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align,-warnings-as-errors]
    struct Edge
           ^
/home/NETID/amyv16/HW3-GraphProject/graph.h:31:12: note: use "__attribute__((aligned(16)))" to align struct 'Edge' to 16 bytes
/home/NETID/amyv16/HW3-GraphProject/graph.h:38:13: error: 'distance' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer,-warnings-as-errors]
            this->distance = distance;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.h:39:13: error: 'destination' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer,-warnings-as-errors]
            this->destination = destination;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graph.h:90:52: error: parameter name 'to' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
    bool connect(const string &from, const string &to, int weight = 0);
                                                   ^
/home/NETID/amyv16/HW3-GraphProject/graph.h:94:55: error: parameter name 'to' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
    bool disconnect(const string &from, const string &to);
                                                      ^
/home/NETID/amyv16/HW3-GraphProject/graph.h:133:62: error: parameter name 'to' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
                void visit(const string &from, const string &to,
                                                             ^
/home/NETID/amyv16/HW3-GraphProject/graph.h:141:65: error: parameter name 'to' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
                   void visit(const string &from, const string &to,
                                                                ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:9:1: error: system include cassert not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <cassert>
^~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:10:1: error: system include iostream not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <iostream>
^~~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:11:1: error: system include sstream not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <sstream>
^~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:12:1: error: system include string not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <string>
^~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:14:17: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
using namespace std;
                ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:34: error: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
void vertexPrinter(const string &s) { globalSS << s; }
                                 ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:48: error: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
void vertexPrinter(const string &s) { globalSS << s; }
                                               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:4020:5: note: resolves to this declaration
    operator<<(basic_ostream<_CharT, _Traits>& __os,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:24:6: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void edgePrinter(const string &from, const string &to, int weight)
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:24:52: error: parameter name 'to' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
void edgePrinter(const string &from, const string &to, int weight)
                                                   ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:26:12: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  globalSS << "[" << from << to << " " << weight << "]";
           ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:26:19: error: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  globalSS << "[" << from << to << " " << weight << "]";
                  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:4020:5: note: resolves to this declaration
    operator<<(basic_ostream<_CharT, _Traits>& __os,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:26:27: error: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  globalSS << "[" << from << to << " " << weight << "]";
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:4020:5: note: resolves to this declaration
    operator<<(basic_ostream<_CharT, _Traits>& __os,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:26:33: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  globalSS << "[" << from << to << " " << weight << "]";
                                ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:26:40: error: 'operator<<' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  globalSS << "[" << from << to << " " << weight << "]";
                                       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
      operator<<(int __n);
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:26:50: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  globalSS << "[" << from << to << " " << weight << "]";
                                                 ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: error: function 'map2string' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace,-warnings-as-errors]
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: error: function 'map2string<std::basic_string<char>, int>' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace,-warnings-as-errors]
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: error: function 'map2string<std::basic_string<char>, std::basic_string<char>>' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace,-warnings-as-errors]
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:43: error: parameter name 'mp' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
static string map2string(const map<K, L> &mp)
                                          ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:33:16: error: invalid case style for variable 'out' [readability-identifier-naming,-warnings-as-errors]
  stringstream out;
               ^~~
               Out
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:34:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (auto &p : mp)
  ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:34:14: error: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  for (auto &p : mp)
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:34:14: error: invalid case style for variable 'p' [readability-identifier-naming,-warnings-as-errors]
  for (auto &p : mp)
             ^
             P
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:34:16: error: 'operator!=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (auto &p : mp)
               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:401:7: note: resolves to this declaration
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:34:16: error: 'operator*' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (auto &p : mp)
               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:358:7: note: resolves to this declaration
      operator*() const _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:34:16: error: 'operator++' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  for (auto &p : mp)
               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_tree.h:366:7: note: resolves to this declaration
      operator++() _GLIBCXX_NOEXCEPT
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:36:9: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    out << "[" << p.first << ":" << p.second << "]";
        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:36:16: error: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    out << "[" << p.first << ":" << p.second << "]";
               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:4020:5: note: resolves to this declaration
    operator<<(basic_ostream<_CharT, _Traits>& __os,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:36:27: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    out << "[" << p.first << ":" << p.second << "]";
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:36:34: error: 'operator<<' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    out << "[" << p.first << ":" << p.second << "]";
                                 ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:191:7: note: resolves to this declaration
      operator<<(int __n);
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:36:34: error: 'operator<<<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    out << "[" << p.first << ":" << p.second << "]";
                                 ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:4020:5: note: resolves to this declaration
    operator<<(basic_ostream<_CharT, _Traits>& __os,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:36:46: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
    out << "[" << p.first << ":" << p.second << "]";
                                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:41:6: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void testGraphBasic()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:41:6: error: function 'testGraphBasic' has cognitive complexity of 45 (threshold 25) [readability-function-cognitive-complexity,-warnings-as-errors]
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:44:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.add("a") && "add vertex a");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:44:21: note: +1
  assert(g.add("a") && "add vertex a");
                    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:45:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.add("b") && "add vertex b");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:45:21: note: +1
  assert(g.add("b") && "add vertex b");
                    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:46:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.add("c") && "add vertex c");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:46:21: note: +1
  assert(g.add("c") && "add vertex c");
                    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:47:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.add("d") && "add vertex d");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:47:21: note: +1
  assert(g.add("d") && "add vertex d");
                    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:48:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.add("e") && "add vertex e");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:48:21: note: +1
  assert(g.add("e") && "add vertex e");
                    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:49:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(!g.add("b") && "b added twice");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:49:22: note: +1
  assert(!g.add("b") && "b added twice");
                     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:50:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.connect("a", "b", 10) && "connect a b");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:50:34: note: +1
  assert(g.connect("a", "b", 10) && "connect a b");
                                 ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:51:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(!g.connect("a", "b", 50) && "duplicate connect a b");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:51:35: note: +1
  assert(!g.connect("a", "b", 50) && "duplicate connect a b");
                                  ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:52:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(!g.connect("a", "a", 1) && "connect a to itself");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:52:34: note: +1
  assert(!g.connect("a", "a", 1) && "connect a to itself");
                                 ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:55:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.verticesSize() == 5) && "graph number of vertices");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:55:34: note: +1
  assert((g.verticesSize() == 5) && "graph number of vertices");
                                 ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:56:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.edgesSize() == 3) && "graph number of edges");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:56:31: note: +1
  assert((g.edgesSize() == 3) && "graph number of edges");
                              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:57:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.vertexDegree("a") == 3) && "vertex number of edges");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:57:37: note: +1
  assert((g.vertexDegree("a") == 3) && "vertex number of edges");
                                    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:58:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.vertexDegree("c") == 0) && "no outgoing edges c");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:58:37: note: +1
  assert((g.vertexDegree("c") == 0) && "no outgoing edges c");
                                    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:59:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.vertexDegree("xxx") == -1) && "no edges for xxx");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:59:40: note: +1
  assert((g.vertexDegree("xxx") == -1) && "no edges for xxx");
                                       ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:60:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(!g.contains("xxx") && "xxx not in graph");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:60:29: note: +1
  assert(!g.contains("xxx") && "xxx not in graph");
                            ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:61:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.contains("a") && "a in graph");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:61:26: note: +1
  assert(g.contains("a") && "a in graph");
                         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:64:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.getEdgesAsString("a") == "b(10),c(20),d(40)");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:66:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(!g.disconnect("a", "e") && "disconnecting non-existent vertex");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:66:34: note: +1
  assert(!g.disconnect("a", "e") && "disconnecting non-existent vertex");
                                 ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:67:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.edgesSize() == 3) && "disconnected nonexisting");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:67:31: note: +1
  assert((g.edgesSize() == 3) && "disconnected nonexisting");
                              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:68:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.disconnect("a", "c") && "a-c disconnect");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:68:33: note: +1
  assert(g.disconnect("a", "c") && "a-c disconnect");
                                ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:69:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.edgesSize() == 2) && "number of edges after disconnect");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:69:31: note: +1
  assert((g.edgesSize() == 2) && "number of edges after disconnect");
                              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:70:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.vertexDegree("a") == 2) && "a has 2 edges");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:70:37: note: +1
  assert((g.vertexDegree("a") == 2) && "a has 2 edges");
                                    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:71:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.getEdgesAsString("a") == "b(10),d(40)" && "removing middle edge");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:71:51: note: +1
  assert(g.getEdgesAsString("a") == "b(10),d(40)" && "removing middle edge");
                                                  ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:43:9: error: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  Graph g;
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:43:9: error: invalid case style for variable 'g' [readability-identifier-naming,-warnings-as-errors]
  Graph g;
        ^
        G
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:53:23: error: 40 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers,-warnings-as-errors]
  g.connect("a", "d", 40);
                      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:54:23: error: 20 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers,-warnings-as-errors]
  g.connect("a", "c", 20);
                      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:64:34: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(g.getEdgesAsString("a") == "b(10),c(20),d(40)");
                                 ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:71:34: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(g.getEdgesAsString("a") == "b(10),d(40)" && "removing middle edge");
                                 ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:74:6: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void testGraph0DFS()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:76:8: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0DFS" << endl;
       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:76:27: error: 'operator<<' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0DFS" << endl;
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:76:30: error: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0DFS" << endl;
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
    endl(basic_ostream<_CharT, _Traits>& __os)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:77:9: error: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  Graph g;
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:77:9: error: invalid case style for variable 'g' [readability-identifier-naming,-warnings-as-errors]
  Graph g;
        ^
        G
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:85:34: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(g.getEdgesAsString("A") == "B(1),C(8)");
                                 ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:86:34: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(g.getEdgesAsString("B") == "C(3)");
                                 ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:89:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("A", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:90:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "ABC" && "starting from A");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:93:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("B", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:94:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "BC" && "starting from B");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:97:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("C", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:98:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "C" && "starting from C");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:101:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("X", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:105:6: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void testGraph0BFS()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:107:8: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0BFS" << endl;
       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:107:27: error: 'operator<<' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0BFS" << endl;
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:107:30: error: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0BFS" << endl;
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
    endl(basic_ostream<_CharT, _Traits>& __os)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:108:9: error: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  Graph g;
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:108:9: error: invalid case style for variable 'g' [readability-identifier-naming,-warnings-as-errors]
  Graph g;
        ^
        G
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:115:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.bfs("A", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:116:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "ABC" && "starting from A");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:119:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("B", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:120:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "BC" && "starting from B");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:123:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("C", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:124:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "C" && "starting from C");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:127:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("X", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:131:6: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void testGraph0Dijkstra()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:133:8: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0Dijkstra" << endl;
       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:133:32: error: 'operator<<' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0Dijkstra" << endl;
                               ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:133:35: error: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0Dijkstra" << endl;
                                  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
    endl(basic_ostream<_CharT, _Traits>& __os)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:134:9: error: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  Graph g;
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:134:9: error: invalid case style for variable 'g' [readability-identifier-naming,-warnings-as-errors]
  Graph g;
        ^
        G
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:139:20: error: invalid case style for variable 'weights' [readability-identifier-naming,-warnings-as-errors]
  map<string, int> weights;
                   ^~~~~~~
                   Weights
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:140:23: error: invalid case style for variable 'previous' [readability-identifier-naming,-warnings-as-errors]
  map<string, string> previous;
                      ^~~~~~~~
                      Previous
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:141:3: error: 'tie<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("A");
  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:2155:5: note: resolves to this declaration
    tie(_Elements&... __args) noexcept
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:141:26: error: 'operator=<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("A");
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:1697:2: note: resolves to this declaration
        operator=(pair<_U1, _U2>&& __in)
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:143:10: error: 'map2string<std::basic_string<char>, int>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:143:30: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:145:10: error: 'map2string<std::basic_string<char>, std::basic_string<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:145:31: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
                              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:147:3: error: 'tie<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("B");
  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:2155:5: note: resolves to this declaration
    tie(_Elements&... __args) noexcept
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:147:26: error: 'operator=<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("B");
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:1697:2: note: resolves to this declaration
        operator=(pair<_U1, _U2>&& __in)
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:148:10: error: 'map2string<std::basic_string<char>, int>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights) == "[C:3]" && "Dijkstra(B) weights");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:148:30: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights) == "[C:3]" && "Dijkstra(B) weights");
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:149:10: error: 'map2string<std::basic_string<char>, std::basic_string<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous) == "[C:B]" && "Dijkstra(B) previous");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:149:31: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous) == "[C:B]" && "Dijkstra(B) previous");
                              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:151:3: error: 'tie<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("X");
  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:2155:5: note: resolves to this declaration
    tie(_Elements&... __args) noexcept
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:151:26: error: 'operator=<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("X");
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:1697:2: note: resolves to this declaration
        operator=(pair<_U1, _U2>&& __in)
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:152:10: error: 'map2string<std::basic_string<char>, int>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights).empty() && "Dijkstra(C) weights");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:153:10: error: 'map2string<std::basic_string<char>, std::basic_string<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous).empty() && "Dijkstra(C) previous");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:156:6: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void testGraph0NotDirected()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:156:6: error: function 'testGraph0NotDirected' has cognitive complexity of 45 (threshold 25) [readability-function-cognitive-complexity,-warnings-as-errors]
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:161:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (!g.readFile("graph0.txt"))
  ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:168:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "ABC" && "starting from A");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:168:34: note: +1
  assert(globalSS.str() == "ABC" && "starting from A");
                                 ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:172:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "BAC" && "starting from B");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:172:34: note: +1
  assert(globalSS.str() == "BAC" && "starting from B");
                                 ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:176:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "CAB" && "starting from C");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:176:34: note: +1
  assert(globalSS.str() == "CAB" && "starting from C");
                                 ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:180:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str().empty() && "starting from X");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:180:33: note: +1
  assert(globalSS.str().empty() && "starting from X");
                                ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:186:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:186:46: note: +1
  assert(map2string(weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
                                             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:188:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:188:47: note: +1
  assert(map2string(previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
                                              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:191:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(weights) == "[A:1][C:3]" && "Dijkstra(B) weights");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:191:46: note: +1
  assert(map2string(weights) == "[A:1][C:3]" && "Dijkstra(B) weights");
                                             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:192:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(previous) == "[A:B][C:B]" && "Dijkstra(B) previous");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:192:47: note: +1
  assert(map2string(previous) == "[A:B][C:B]" && "Dijkstra(B) previous");
                                              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:195:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(weights).empty() && "Dijkstra(C) weights");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:195:38: note: +1
  assert(map2string(weights).empty() && "Dijkstra(C) weights");
                                     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:196:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(previous).empty() && "Dijkstra(C) previous");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:196:39: note: +1
  assert(map2string(previous).empty() && "Dijkstra(C) previous");
                                      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:200:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(mstLength == 4 && "mst A is 4");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:200:25: note: +1
  assert(mstLength == 4 && "mst A is 4");
                        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:201:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "[AB 1][BC 3]" && "mst A is [AB 1][BC 3]");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:201:43: note: +1
  assert(globalSS.str() == "[AB 1][BC 3]" && "mst A is [AB 1][BC 3]");
                                          ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:205:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(mstLength == 4 && "mst 4 is 4");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:205:25: note: +1
  assert(mstLength == 4 && "mst 4 is 4");
                        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:206:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "[BA 1][BC 3]");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:210:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(mstLength == 4 && "mst C is 4");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:210:25: note: +1
  assert(mstLength == 4 && "mst C is 4");
                        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:211:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "[CB 3][BA 1]");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:215:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(mstLength == -1 && "mst X is -1");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:215:26: note: +1
  assert(mstLength == -1 && "mst X is -1");
                         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:216:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str().empty() && "mst for vertex not found");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:216:33: note: +1
  assert(globalSS.str().empty() && "mst for vertex not found");
                                ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:222:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(mstLength == 4 && "mst A is 4");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:222:25: note: +1
  assert(mstLength == 4 && "mst A is 4");
                        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:223:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "[AB 1][BC 3]");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:227:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(mstLength == 4 && "mst B is 4");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:227:25: note: +1
  assert(mstLength == 4 && "mst B is 4");
                        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:228:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "[AB 1][BC 3]");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:232:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(mstLength == -1 && "mst X is -1");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:232:26: note: +1
  assert(mstLength == -1 && "mst X is -1");
                         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:233:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str().empty() && "mst for vertex not found");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:233:33: note: +1
  assert(globalSS.str().empty() && "mst for vertex not found");
                                ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:158:8: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0NotDirected" << endl;
       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:158:35: error: 'operator<<' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0NotDirected" << endl;
                                  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:158:38: error: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph0NotDirected" << endl;
                                     ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
    endl(basic_ostream<_CharT, _Traits>& __os)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:159:3: error: variable 'isDirectional' of type 'bool' can be declared 'const' [misc-const-correctness,-warnings-as-errors]
  bool isDirectional = false;
  ^
       const 
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:159:8: error: invalid case style for variable 'isDirectional' [readability-identifier-naming,-warnings-as-errors]
  bool isDirectional = false;
       ^~~~~~~~~~~~~
       IsDirectional
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:160:9: error: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  Graph g(isDirectional);
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:160:9: error: invalid case style for variable 'g' [readability-identifier-naming,-warnings-as-errors]
  Graph g(isDirectional);
        ^
        G
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:167:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.bfs("A", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:168:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "ABC" && "starting from A");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:171:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("B", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:172:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "BAC" && "starting from B");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:175:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("C", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:176:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "CAB" && "starting from C");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:179:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("X", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:182:20: error: invalid case style for variable 'weights' [readability-identifier-naming,-warnings-as-errors]
  map<string, int> weights;
                   ^~~~~~~
                   Weights
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:183:23: error: invalid case style for variable 'previous' [readability-identifier-naming,-warnings-as-errors]
  map<string, string> previous;
                      ^~~~~~~~
                      Previous
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:184:3: error: 'tie<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("A");
  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:2155:5: note: resolves to this declaration
    tie(_Elements&... __args) noexcept
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:184:26: error: 'operator=<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("A");
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:1697:2: note: resolves to this declaration
        operator=(pair<_U1, _U2>&& __in)
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:186:10: error: 'map2string<std::basic_string<char>, int>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:186:30: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:188:10: error: 'map2string<std::basic_string<char>, std::basic_string<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:188:31: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
                              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:190:3: error: 'tie<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("B");
  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:2155:5: note: resolves to this declaration
    tie(_Elements&... __args) noexcept
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:190:26: error: 'operator=<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("B");
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:1697:2: note: resolves to this declaration
        operator=(pair<_U1, _U2>&& __in)
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:191:10: error: 'map2string<std::basic_string<char>, int>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights) == "[A:1][C:3]" && "Dijkstra(B) weights");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:191:30: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights) == "[A:1][C:3]" && "Dijkstra(B) weights");
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:192:10: error: 'map2string<std::basic_string<char>, std::basic_string<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous) == "[A:B][C:B]" && "Dijkstra(B) previous");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:192:31: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous) == "[A:B][C:B]" && "Dijkstra(B) previous");
                              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:194:3: error: 'tie<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("X");
  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:2155:5: note: resolves to this declaration
    tie(_Elements&... __args) noexcept
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:194:26: error: 'operator=<std::map<std::basic_string<char>, int>, std::map<std::basic_string<char>, std::basic_string<char>>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  tie(weights, previous) = g.dijkstra("X");
                         ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/tuple:1697:2: note: resolves to this declaration
        operator=(pair<_U1, _U2>&& __in)
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:195:10: error: 'map2string<std::basic_string<char>, int>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights).empty() && "Dijkstra(C) weights");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:196:10: error: 'map2string<std::basic_string<char>, std::basic_string<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous).empty() && "Dijkstra(C) previous");
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:199:7: error: invalid case style for variable 'mstLength' [readability-identifier-naming,-warnings-as-errors]
  int mstLength = g.mstPrim("A", edgePrinter);
      ^~~~~~~~~
      MstLength
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:199:34: error: 'edgePrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  int mstLength = g.mstPrim("A", edgePrinter);
                                 ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:24:6: note: resolves to this declaration
void edgePrinter(const string &from, const string &to, int weight)
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:201:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "[AB 1][BC 3]" && "mst A is [AB 1][BC 3]");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:204:30: error: 'edgePrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  mstLength = g.mstPrim("B", edgePrinter);
                             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:24:6: note: resolves to this declaration
void edgePrinter(const string &from, const string &to, int weight)
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:206:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "[BA 1][BC 3]");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:209:30: error: 'edgePrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  mstLength = g.mstPrim("C", edgePrinter);
                             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:24:6: note: resolves to this declaration
void edgePrinter(const string &from, const string &to, int weight)
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:211:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "[CB 3][BA 1]");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:214:30: error: 'edgePrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  mstLength = g.mstPrim("X", edgePrinter);
                             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:24:6: note: resolves to this declaration
void edgePrinter(const string &from, const string &to, int weight)
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:221:33: error: 'edgePrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  mstLength = g.mstKruskal("A", edgePrinter);
                                ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:24:6: note: resolves to this declaration
void edgePrinter(const string &from, const string &to, int weight)
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:223:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "[AB 1][BC 3]");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:226:33: error: 'edgePrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  mstLength = g.mstKruskal("C", edgePrinter);
                                ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:24:6: note: resolves to this declaration
void edgePrinter(const string &from, const string &to, int weight)
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:228:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "[AB 1][BC 3]");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:231:33: error: 'edgePrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  mstLength = g.mstKruskal("X", edgePrinter);
                                ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:24:6: note: resolves to this declaration
void edgePrinter(const string &from, const string &to, int weight)
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:236:6: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void testGraph1()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:238:8: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph1" << endl;
       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:238:24: error: 'operator<<' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph1" << endl;
                       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:238:27: error: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "testGraph1" << endl;
                          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
    endl(basic_ostream<_CharT, _Traits>& __os)
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:239:9: error: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  Graph g;
        ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:239:9: error: invalid case style for variable 'g' [readability-identifier-naming,-warnings-as-errors]
  Graph g;
        ^
        G
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:245:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("A", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:246:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "ABCDEFGH" && "dfs starting from A");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:249:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.bfs("A", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:250:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "ABHCGDEF" && "bfs starting from A");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:253:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.dfs("B", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:254:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "BCDEFG" && "dfs starting from B");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:257:14: error: 'vertexPrinter' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  g.bfs("B", vertexPrinter);
             ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:21:6: note: resolves to this declaration
void vertexPrinter(const string &s) { globalSS << s; }
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:258:25: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(globalSS.str() == "BCDEFG" && "bfs starting from B");
                        ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:260:20: error: invalid case style for variable 'weights' [readability-identifier-naming,-warnings-as-errors]
  map<string, int> weights;
                   ^~~~~~~
                   Weights
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:261:23: error: invalid case style for variable 'previous' [readability-identifier-naming,-warnings-as-errors]
  map<string, string> previous;
                      ^~~~~~~~
                      Previous
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:262:8: error: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  auto p = g.dijkstra("A");
       ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:262:8: error: invalid case style for variable 'p' [readability-identifier-naming,-warnings-as-errors]
  auto p = g.dijkstra("A");
       ^
       P
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:263:11: error: 'operator=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  weights = p.first;
          ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_map.h:331:7: note: resolves to this declaration
      operator=(const map&) = default;
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:264:12: error: 'operator=' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  previous = p.second;
           ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/stl_map.h:331:7: note: resolves to this declaration
      operator=(const map&) = default;
      ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:265:10: error: 'map2string<std::basic_string<char>, int>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights) == "[B:1][C:2][D:3][E:4][F:5][G:4][H:3]" &&
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:265:30: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(weights) == "[B:1][C:2][D:3][E:4][F:5][G:4][H:3]" &&
                             ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:267:10: error: 'map2string<std::basic_string<char>, std::basic_string<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous) == "[B:A][C:B][D:C][E:D][F:E][G:H][H:A]" &&
         ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:31:15: note: resolves to this declaration
static string map2string(const map<K, L> &mp)
              ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:267:31: error: 'operator==<char, std::char_traits<char>, std::allocator<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  assert(map2string(previous) == "[B:A][C:B][D:C][E:D][F:E][G:H][H:A]" &&
                              ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/bits/basic_string.h:3715:5: note: resolves to this declaration
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
    ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:271:6: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void testAll()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:273:3: error: 'testGraphBasic' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  testGraphBasic();
  ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:41:6: note: resolves to this declaration
void testGraphBasic()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:274:3: error: 'testGraph0DFS' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  testGraph0DFS();
  ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:74:6: note: resolves to this declaration
void testGraph0DFS()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:275:3: error: 'testGraph0BFS' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  testGraph0BFS();
  ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:105:6: note: resolves to this declaration
void testGraph0BFS()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:276:3: error: 'testGraph0Dijkstra' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  testGraph0Dijkstra();
  ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:131:6: note: resolves to this declaration
void testGraph0Dijkstra()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:277:3: error: 'testGraph0NotDirected' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  testGraph0NotDirected();
  ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:156:6: note: resolves to this declaration
void testGraph0NotDirected()
     ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:278:3: error: 'testGraph1' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  testGraph1();
  ^
/home/NETID/amyv16/HW3-GraphProject/graphtest.cpp:236:6: note: resolves to this declaration
void testGraph1()
     ^
/home/NETID/amyv16/HW3-GraphProject/main.cpp:5:1: error: system include iostream not allowed [llvmlibc-restrict-system-libc-headers,-warnings-as-errors]
#include <iostream>
^~~~~~~~~~~~~~~~~~~
/home/NETID/amyv16/HW3-GraphProject/main.cpp:7:17: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
using namespace std;
                ^
/home/NETID/amyv16/HW3-GraphProject/main.cpp:10:6: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
void testAll();
     ^
/home/NETID/amyv16/HW3-GraphProject/main.cpp:12:5: error: declaration must be declared within the '__llvm_libc' namespace [llvmlibc-implementation-in-namespace,-warnings-as-errors]
int main() {
    ^
/home/NETID/amyv16/HW3-GraphProject/main.cpp:13:3: error: 'testAll' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  testAll();
  ^
/home/NETID/amyv16/HW3-GraphProject/main.cpp:10:6: note: resolves to this declaration
void testAll();
     ^
/home/NETID/amyv16/HW3-GraphProject/main.cpp:14:8: error: 'operator<<<std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "Done!" << endl;
       ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:662:5: note: resolves to this declaration
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    ^
/home/NETID/amyv16/HW3-GraphProject/main.cpp:14:19: error: 'operator<<' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "Done!" << endl;
                  ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:110:7: note: resolves to this declaration
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      ^
/home/NETID/amyv16/HW3-GraphProject/main.cpp:14:22: error: 'endl<char, std::char_traits<char>>' must resolve to a function declared within the '__llvm_libc' namespace [llvmlibc-callee-namespace,-warnings-as-errors]
  cout << "Done!" << endl;
                     ^
/opt/rh/gcc-toolset-13/root/usr/lib/gcc/x86_64-redhat-linux/13/../../../../include/c++/13/ostream:735:5: note: resolves to this declaration
    endl(basic_ostream<_CharT, _Traits>& __os)
    ^
Suppressed 137484 warnings (137480 in non-user code, 4 NOLINT).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
441 warnings treated as errors
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./graph.cpp
8a9
> #include <stack>
11d11
< #include <stack>
16,19c16
< Vertex::Vertex(string value)
< {
<   this->value = value;
< }
---
> Vertex::Vertex(string value) { this->value = value; }
23,24c20
< Graph::Graph(bool directionalEdges)
< {
---
> Graph::Graph(bool directionalEdges) {
29,34c25,27
< Graph::~Graph()
< {
<   for (const auto &vertex : vertices)
<   {
<     for (const auto &edge : vertex.second->edges)
<     {
---
> Graph::~Graph() {
>   for (const auto &vertex : vertices) {
>     for (const auto &edge : vertex.second->edges) {
42,45c35
< int Graph::verticesSize() const
< {
<   return vertices.size();
< }
---
> int Graph::verticesSize() const { return vertices.size(); }
48,49c38
< int Graph::edgesSize() const
< {
---
> int Graph::edgesSize() const {
51,52c40
<   for (const auto &vertex : vertices)
<   {
---
>   for (const auto &vertex : vertices) {
56,57c44
<   if (!directionalEdges)
<   {
---
>   if (!directionalEdges) {
65,66c52
< int Graph::vertexDegree(const string &label) const
< {
---
> int Graph::vertexDegree(const string &label) const {
69,70c55
<   if (vertices.count(label))
<   {
---
>   if (vertices.count(label)) {
72,74c57
<   }
<   else
<   {
---
>   } else {
82,85c65,66
< bool Graph::add(const string &label)
< {
<   if (vertices.count(label))
<   {
---
> bool Graph::add(const string &label) {
>   if (vertices.count(label)) {
87,89c68
<   }
<   else
<   {
---
>   } else {
97,98c76
< bool Graph::contains(const string &label) const
< {
---
> bool Graph::contains(const string &label) const {
104,105c82
< string Graph::getEdgesAsString(const string &label) const
< {
---
> string Graph::getEdgesAsString(const string &label) const {
110,111c87
<   if (vertices.count(label))
<   {
---
>   if (vertices.count(label)) {
113,115c89
<   }
<   else
<   {
---
>   } else {
120,123c94,96
<   for (const auto &vertex : vertexFind->edges)
<   {
<     edgeString = edgeString + vertex.second->destination->value +
<                  "(" + to_string(vertex.second->distance) + "),";
---
>   for (const auto &vertex : vertexFind->edges) {
>     edgeString = edgeString + vertex.second->destination->value + "(" +
>                  to_string(vertex.second->distance) + "),";
127,128c100
<   if (!(edgeString.empty()))
<   {
---
>   if (!(edgeString.empty())) {
136,137c108
< bool Graph::connect(const string &from, const string &to, int weight)
< {
---
> bool Graph::connect(const string &from, const string &to, int weight) {
142,143c113
<   if (from == to)
<   {
---
>   if (from == to) {
148,149c118
<   if (!(vertices.count(from)))
<   {
---
>   if (!(vertices.count(from))) {
153,154c122
<   if (!(vertices.count(to)))
<   {
---
>   if (!(vertices.count(to))) {
162,163c130
<   if (fromVertex->edges.count(to))
<   {
---
>   if (fromVertex->edges.count(to)) {
171,172c138
<   if (!(directionalEdges))
<   {
---
>   if (!(directionalEdges)) {
179,180c145
< bool Graph::disconnect(const string &from, const string &to)
< {
---
> bool Graph::disconnect(const string &from, const string &to) {
185,186c150
<   if ((from != to) && (vertices.count(from) && vertices.count(to)))
<   {
---
>   if ((from != to) && (vertices.count(from) && vertices.count(to))) {
189,191c153
<   }
<   else
<   {
---
>   } else {
196,197c158
<   if (fromVertex->edges.count(to))
<   {
---
>   if (fromVertex->edges.count(to)) {
200,202c161
<   }
<   else
<   {
---
>   } else {
207,208c166
<   if (!(directionalEdges))
<   {
---
>   if (!(directionalEdges)) {
217,218c175
< void Graph::dfs(const string &startLabel, void visit(const string &label))
< {
---
> void Graph::dfs(const string &startLabel, void visit(const string &label)) {
224,225c181
<   if (vertices.count(startLabel))
<   {
---
>   if (vertices.count(startLabel)) {
228,230c184
<   }
<   else
<   {
---
>   } else {
234,235c188
<   while (!(toVisit.empty()))
<   {
---
>   while (!(toVisit.empty())) {
246,247c199,200
<     for (it = currentVertex->edges.rbegin(); it != currentVertex->edges.rend(); it++)
<     {
---
>     for (it = currentVertex->edges.rbegin(); it != currentVertex->edges.rend();
>          it++) {
249,250c202
<       if (!(visited.count(it->second->destination->value)))
<       {
---
>       if (!(visited.count(it->second->destination->value))) {
259,260c211
< void Graph::bfs(const string &startLabel, void visit(const string &label))
< {
---
> void Graph::bfs(const string &startLabel, void visit(const string &label)) {
266,267c217
<   if (vertices.count(startLabel))
<   {
---
>   if (vertices.count(startLabel)) {
270,272c220
<   }
<   else
<   {
---
>   } else {
276,277c224
<   while (!(toVisit.empty()))
<   {
---
>   while (!(toVisit.empty())) {
284,285c231
<     for (const auto &edge : currentVertex->edges)
<     {
---
>     for (const auto &edge : currentVertex->edges) {
287,288c233
<       if (!(visited.count(edge.second->destination->value)))
<       {
---
>       if (!(visited.count(edge.second->destination->value))) {
301,302c246
< Graph::dijkstra(const string &startLabel) const
< {
---
> Graph::dijkstra(const string &startLabel) const {
320,321c264
<   if (vertices.count(startLabel))
<   {
---
>   if (vertices.count(startLabel)) {
323,325c266
<   }
<   else
<   {
---
>   } else {
329,330c270
<   while (!(toVisit.empty()))
<   {
---
>   while (!(toVisit.empty())) {
333c273
<     previousLabel = toVisit.top().second.first;  // get previous vertex of vertex
---
>     previousLabel = toVisit.top().second.first; // get previous vertex of vertex
339,340c279
<         weights.at(currentVertex->value) > path)
<     {
---
>         weights.at(currentVertex->value) > path) {
342,343c281
<       if (!(weights.count(currentVertex->value)))
<       {
---
>       if (!(weights.count(currentVertex->value))) {
346,348c284
<       }
<       else if (weights.at(currentVertex->value) > path)
<       {
---
>       } else if (weights.at(currentVertex->value) > path) {
354,355c290
<       for (const auto &edge : currentVertex->edges)
<       {
---
>       for (const auto &edge : currentVertex->edges) {
360,363c295,298
<              weights.at(edge.second->destination->value)))
<         {
<           toVisit.push(make_pair(path + edge.second->distance,
<                                  make_pair(currentVertex->value, edge.second->destination)));
---
>              weights.at(edge.second->destination->value))) {
>           toVisit.push(make_pair(
>               path + edge.second->distance,
>               make_pair(currentVertex->value, edge.second->destination)));
369c304,305
<   // remove start vertext looping back to itself ( [start: 0] and [start: start])
---
>   // remove start vertext looping back to itself ( [start: 0] and [start:
>   // start])
379,380c315
<                               int weight)) const
< {
---
>                               int weight)) const {
391,392c326
<   if (!(vertices.count(startLabel) || directionalEdges))
<   {
---
>   if (!(vertices.count(startLabel) || directionalEdges)) {
400,401c334
<   for (const auto &edge : vertices.at(startLabel)->edges)
<   {
---
>   for (const auto &edge : vertices.at(startLabel)->edges) {
408,409c341
<   while (!pq.empty() && visited.size() < vertices.size())
<   {
---
>   while (!pq.empty() && visited.size() < vertices.size()) {
419,420c351
<     if (visited.count(toVertex))
<     {
---
>     if (visited.count(toVertex)) {
434,437c365,366
<     for (const auto &nextEdge : vertices.at(toVertex)->edges)
<     {
<       if (!visited.count(nextEdge.first))
<       {
---
>     for (const auto &nextEdge : vertices.at(toVertex)->edges) {
>       if (!visited.count(nextEdge.first)) {
449,450c378
<                                  int weight)) const
< {
---
>                                  int weight)) const {
478,479c406
<   if (!(vertices.count(startLabel)) || directionalEdges)
<   {
---
>   if (!(vertices.count(startLabel)) || directionalEdges) {
484,487c411,412
<   for (const auto &vertex : vertices)
<   {
<     for (const auto &edge : vertex.second->edges)
<     {
---
>   for (const auto &vertex : vertices) {
>     for (const auto &edge : vertex.second->edges) {
494,495c419
<   while (!(edges.empty()))
<   {
---
>   while (!(edges.empty())) {
505,508c429,430
<     for (int i = 0; i < minimumSpanningTree.size(); i++)
<     {
<       if (minimumSpanningTree[i].second.second.count(fromVertex))
<       {
---
>     for (int i = 0; i < minimumSpanningTree.size(); i++) {
>       if (minimumSpanningTree[i].second.second.count(fromVertex)) {
512,513c434
<       if (minimumSpanningTree[i].second.second.count(toVertex))
<       {
---
>       if (minimumSpanningTree[i].second.second.count(toVertex)) {
519,520c440
<     if (fromIndex == -1 && toIndex == -1)
<     {
---
>     if (fromIndex == -1 && toIndex == -1) {
530,531c450,451
<       minimumSpanningTree.push_back(
<           make_pair(distance, make_pair(otherConnectedVertices, connectedVertices)));
---
>       minimumSpanningTree.push_back(make_pair(
>           distance, make_pair(otherConnectedVertices, connectedVertices)));
536,537c456
<     else if (fromIndex == -1 && toIndex != -1)
<     {
---
>     else if (fromIndex == -1 && toIndex != -1) {
544,546c463
<     }
<     else if (fromIndex != -1 && toIndex == -1)
<     {
---
>     } else if (fromIndex != -1 && toIndex == -1) {
556,559c473,474
<     else if (fromIndex != -1 && toIndex != -1 &&
<              fromIndex != toIndex &&
<              !(minimumSpanningTree[fromIndex].second.first.count(toIndex)))
<     {
---
>     else if (fromIndex != -1 && toIndex != -1 && fromIndex != toIndex &&
>              !(minimumSpanningTree[fromIndex].second.first.count(toIndex))) {
573,576c488,489
<   for (int i = 0; i < minimumSpanningTree.size(); i++)
<   {
<     if (minimumSpanningTree[i].second.second.count(startLabel))
<     {
---
>   for (int i = 0; i < minimumSpanningTree.size(); i++) {
>     if (minimumSpanningTree[i].second.second.count(startLabel)) {
586,587c499
<   while (!(minimumSpanningTreeTraversal.empty()))
<   {
---
>   while (!(minimumSpanningTreeTraversal.empty())) {
597,600c509,510
<          minimumSpanningTree[startVertexConnection].second.first)
<     {
<       if (!(visited.count(connectedVertices)))
<       {
---
>          minimumSpanningTree[startVertexConnection].second.first) {
>       if (!(visited.count(connectedVertices))) {
611,612c521
< bool Graph::readFile(const string &filename)
< {
---
> bool Graph::readFile(const string &filename) {
614,615c523
<   if (!myfile.is_open())
<   {
---
>   if (!myfile.is_open()) {
624,625c532
<   for (int i = 0; i < edges; ++i)
<   {
---
>   for (int i = 0; i < edges; ++i) {
Running clang-format on ./graphtest.cpp
24,25c24
< void edgePrinter(const string &from, const string &to, int weight)
< {
---
> void edgePrinter(const string &from, const string &to, int weight) {
31,32c30
< static string map2string(const map<K, L> &mp)
< {
---
> static string map2string(const map<K, L> &mp) {
34,35c32
<   for (auto &p : mp)
<   {
---
>   for (auto &p : mp) {
41,42c38
< void testGraphBasic()
< {
---
> void testGraphBasic() {
74,75c70
< void testGraph0DFS()
< {
---
> void testGraph0DFS() {
78,79c73
<   if (!g.readFile("graph0.txt"))
<   {
---
>   if (!g.readFile("graph0.txt")) {
105,106c99
< void testGraph0BFS()
< {
---
> void testGraph0BFS() {
109,110c102
<   if (!g.readFile("graph0.txt"))
<   {
---
>   if (!g.readFile("graph0.txt")) {
131,132c123
< void testGraph0Dijkstra()
< {
---
> void testGraph0Dijkstra() {
135,136c126
<   if (!g.readFile("graph0.txt"))
<   {
---
>   if (!g.readFile("graph0.txt")) {
156,157c146
< void testGraph0NotDirected()
< {
---
> void testGraph0NotDirected() {
161,162c150
<   if (!g.readFile("graph0.txt"))
<   {
---
>   if (!g.readFile("graph0.txt")) {
236,237c224
< void testGraph1()
< {
---
> void testGraph1() {
240,241c227
<   if (!g.readFile("graph1.txt"))
<   {
---
>   if (!g.readFile("graph1.txt")) {
271,272c257
< void testAll()
< {
---
> void testAll() {
Running clang-format on ./main.cpp
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==1450190== Memcheck, a memory error detector
==1450190== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==1450190== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==1450190== Command: ./a.out
==1450190== Parent PID: 1450074
==1450190== 
==1450190== 
==1450190== HEAP SUMMARY:
==1450190==     in use at exit: 0 bytes in 0 blocks
==1450190==   total heap usage: 339 allocs, 339 frees, 153,563 bytes allocated
==1450190== 
==1450190== All heap blocks were freed -- no leaks are possible
==1450190== 
==1450190== For lists of detected and suppressed errors, rerun with: -s
==1450190== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
WARNING: check-code-coverage.sh script is missing
Mon Apr 29 21:40:05 PDT 2024
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
